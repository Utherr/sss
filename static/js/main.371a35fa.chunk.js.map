{"version":3,"sources":["components/Banner.jsx","components/Welcome.jsx","components/GameNavi.jsx","components/GameWindow.jsx","components/Game.jsx","components/Footer.jsx","App.js","serviceWorker.js","index.js"],"names":["Frame","react_default","a","createElement","className","React","Component","Welcome","playGame","this","props","onClick","bind","GameNavi","GameWindow","Game","GameNavi_GameNavi","GameWindow_GameWindow","Footer","class","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","startGame","welcomeToGame","setState","state","Banner_Frame","renderGame","components_Footer","Welcome_Welcome","Game_Game","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oTAGqBA,gMAEb,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACXH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,wBAAb,SACUH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,OAAhB,OADV,eAJmBC,IAAMC,YCCpBC,0LAER,IACGC,EAAaC,KAAKC,MAAlBF,SACR,OACIP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAb,6BACAH,EAAAC,EAAAC,cAAA,UACIQ,QAAUH,EAASI,KAAKH,MAAM,GAC9BL,UAAU,mBAFd,gBAPqBC,IAAMC,YCFtBO,mLAEb,OACIZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBACXH,EAAAC,EAAAC,cAAA,8BAJsBE,IAAMC,WCAvBQ,mLAIb,OAEIb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBACXH,EAAAC,EAAAC,cAAA,gCAPwBE,IAAMC,WCIzBS,0LAER,IAEGP,EAAaC,KAAKC,MAAlBF,SAER,OACIP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAACa,EAAD,MACAf,EAAAC,EAAAC,cAACc,EAAD,MACAhB,EAAAC,EAAAC,cAAA,UACIQ,QAAUH,EAASI,KAAKH,MAAM,GAC9BL,UAAU,gCAFd,oBAZUC,IAAMC,YCIzBY,EARA,WACX,OACIjB,EAAAC,EAAAC,cAAA,OAAKgB,MAAM,UAAX,SACUlB,EAAAC,EAAAC,cAAA,QAAMC,UAAU,OAAhB,OADV,QCmCOgB,cA7Bb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAb,KAAAW,IACZC,EAAAC,OAAAE,EAAA,EAAAF,CAAAb,KAAAa,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAjB,QAcFkB,UAAY,SAACC,GACXP,EAAKQ,SAAS,CACZD,mBAfFP,EAAKS,MAAQ,CAAEF,eAAe,GAFlBP,wEAMZ,OACEpB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC4B,EAAD,MACEtB,KAAKuB,aACP/B,EAAAC,EAAAC,cAAC8B,EAAD,4CAYJ,OAAGxB,KAAKqB,MAAMF,cACL3B,EAAAC,EAAAC,cAAC+B,EAAD,CAAS1B,SAAWC,KAAKkB,YAC3B1B,EAAAC,EAAAC,cAACgC,EAAD,CAAM3B,SAAWC,KAAKkB,mBA1BfrB,aCIE8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzC,EAAAC,EAAAC,cAACwC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.371a35fa.chunk.js","sourcesContent":["import React from 'react';\r\nimport './../style/Banner.css';\r\n\r\nexport default class Frame extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"banner navbar py-3\">\r\n                <p className=\"h2 pl-md-5 pl-4 pt-1\">\r\n                    react.<span className=\"red\">may</span>hem\r\n                </p>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\n\r\nimport './../style/Welcome.css';\r\n\r\nexport default class Welcome extends React.Component {\r\n\r\n    render() {\r\n        const { playGame } = this.props;\r\n        return(\r\n            <div className=\"welcome\">\r\n                <p className=\"pt-5\">Sign up/in, welcome panel</p>\r\n                <button\r\n                    onClick={ playGame.bind(this, false) }\r\n                    className=\"btn btn-primary\"\r\n                >Play\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\n\r\nexport default class GameNavi extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"col-3 h-100 tmp2 pt-5\">\r\n                <p>Game navi</p>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\n\r\nexport default class GameWindow extends React.Component {\r\n\r\n    render() {\r\n\r\n        return (\r\n            \r\n            <div className=\"col-9 h-100 tmp1 pt-5\">\r\n                <p>Game window</p>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}","import React from 'react';\r\nimport GameNavi from './GameNavi.jsx';\r\nimport GameWindow from './GameWindow.jsx';\r\n\r\nimport './../style/Game.css';\r\n\r\nexport default class Game extends React.Component {\r\n\r\n    render() {\r\n\r\n        const { playGame } = this.props;\r\n\r\n        return (\r\n            <div className=\"game py-2\">\r\n                <div className=\"container h-100\">\r\n                    <div className=\"row h-100\">\r\n                        <GameNavi />\r\n                        <GameWindow />\r\n                        <button\r\n                            onClick={ playGame.bind(this, true) }\r\n                            className=\"btn btn-primary logoutButton\"\r\n                        >Logout\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <div class=\"footer\">\r\n            react.<span className=\"red\">may</span>hem\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Footer;","import React, { Component } from 'react';\nimport './App.css';\n\nimport Banner from './components/Banner.jsx';\nimport Welcome from './components/Welcome.jsx';\nimport Game from './components/Game.jsx';\nimport Footer from './components/Footer.jsx';\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state = { welcomeToGame: true };\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Banner />\n        { this.renderGame() }\n        <Footer />\n      </div>\n    );\n  }\n\n  startGame = (welcomeToGame) => {\n    this.setState({\n      welcomeToGame\n    });\n  }\n\n  renderGame() {\n    if(this.state.welcomeToGame)\n      return <Welcome playGame={ this.startGame } />\n    return <Game playGame={ this.startGame } />\n      \n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}