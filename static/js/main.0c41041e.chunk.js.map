{"version":3,"sources":["components/Banner.jsx","components/Welcome.jsx","components/Game.jsx","App.js","serviceWorker.js","index.js"],"names":["Frame","react_default","a","createElement","className","React","Component","Welcome","Game","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","play","Banner_Frame","renderGame","setState","onClick","nieGraj","bind","Game_Game","value","Welcome_Welcome","graj","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oTAGqBA,gMAEb,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACXH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,wBAAb,SACUH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,OAAhB,OADV,eAJmBC,IAAMC,YCCpBC,0LAEb,OACIN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAb,qCAJqBC,IAAMC,YCAtBE,0LAEb,OACIP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,aAAb,yBAEJH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,aAAb,iCAVMC,IAAMC,YCsDzBG,cAjDb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CAAEC,MAAM,GAFTR,wEAMZ,OACET,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACgB,EAAD,MACEN,KAAKO,6CAMXP,KAAKQ,SAAS,CACZH,MAAM,sCAKRL,KAAKQ,SAAS,CACZH,MAAM,yCAKR,OAAGL,KAAKI,MAAMC,KAGVjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,gCAAgCkB,QAAUT,KAAKU,QAAQC,KAAKX,OAA9E,QACAZ,EAAAC,EAAAC,cAACsB,EAAD,CAAMC,MAAM,QAOdzB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACwB,EAAD,MACA1B,EAAAC,EAAAC,cAAA,UAAQC,UAAU,oCAAoCkB,QAAUT,KAAKe,KAAKJ,KAAKX,OAA/E,gBA3CQP,aCKEuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlC,EAAAC,EAAAC,cAACiC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.0c41041e.chunk.js","sourcesContent":["import React from 'react';\r\nimport './../style/Banner.css';\r\n\r\nexport default class Frame extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"banner navbar py-3\">\r\n                <p className=\"h2 pl-md-5 pl-4 pt-1\">\r\n                    react.<span className=\"red\">may</span>hem\r\n                </p>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\n\r\nimport './../style/Welcome.css';\r\n\r\nexport default class Welcome extends React.Component {\r\n    render() {\r\n        return(\r\n            <div className=\"welcome\">\r\n                <p className=\"pt-5\">Sign up/in, welcome panel</p>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\n\r\nimport './../style/Game.css';\r\n\r\nexport default class Game extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"game pt-5\">\r\n                <div className=\"container h-100\">\r\n                    <div className=\"row h-100\">\r\n                        <div className=\"col-3\">\r\n                            <p className=\"tmp1 pt-5\">Some game navigation</p>\r\n                        </div>\r\n                        <div className=\"col-9\">\r\n                            <p className=\"tmp2 pt-5\">Game action window</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\nimport './App.css';\n\nimport Banner from './components/Banner.jsx';\nimport Welcome from './components/Welcome.jsx';\nimport Game from './components/Game.jsx';\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state = { play: false };\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Banner />\n        { this.renderGame() }\n      </div>\n    );\n  }\n\n  graj() {\n    this.setState({\n      play: true\n    })\n  }\n\n  nieGraj() {\n    this.setState({\n      play: false\n    })\n  }\n\n  renderGame() {\n    if(this.state.play)\n    {\n      return (\n        <div className=\"game\">\n          <button className=\"button btn btn-secondary px-5\" onClick={ this.nieGraj.bind(this) }>Exit</button>\n          <Game value=\"xd\" />\n        </div>\n      );\n    }\n    else\n    {\n      return (\n        <div>\n          <Welcome />\n          <button className=\"button2 btn btn-primary mt-5 px-5\" onClick={ this.graj.bind(this) }>Play</button>\n        </div>\n      );\n    }\n      \n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}